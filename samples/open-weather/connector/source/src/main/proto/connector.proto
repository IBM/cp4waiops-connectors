syntax = "proto3";

package watson.aiops.connector;
import "google/protobuf/empty.proto";
import "spec.proto";

option java_multiple_files = true;

service ConnectorService {
    //The connector "calls home" with its ID and starts to receive configuration (initial + subsequent updates)
    rpc configuration (ConnectorID) returns (stream ConnectorConfiguration) {}

    //The connector periodically sends status to the server. No response required
    rpc status(stream ConnectorStatus) returns (google.protobuf.Empty) {}

    //This bi-directional stream mimics a Kafka bus. 
    //The server-side will interact with the Kafka broker accordingly
    rpc dataChannel (stream OutboundData) returns (stream InboundData) {}
}

// This structure is used in every outbound call, so that the server know who it's from
message ConnectorID {
  string id = 1;
  string type = 2;
}

message ConnectorConfiguration {
  string config = 1;
}

message ConnectorStatus {
  ConnectorID id = 1;
  string status = 2;
  string msg = 3;
}

message OutboundData {
  ConnectorID id = 1;
  string topic = 2;
  io.cloudevents.v1.CloudEvent msg = 3;
}

message InboundData {
  string topic = 1;
  io.cloudevents.v1.CloudEvent msg = 2;
}

